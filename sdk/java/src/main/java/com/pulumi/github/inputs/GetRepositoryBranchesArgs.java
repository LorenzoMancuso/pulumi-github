// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRepositoryBranchesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRepositoryBranchesArgs Empty = new GetRepositoryBranchesArgs();

    @Import(name="onlyNonProtectedBranches")
    private @Nullable Output<Boolean> onlyNonProtectedBranches;

    public Optional<Output<Boolean>> onlyNonProtectedBranches() {
        return Optional.ofNullable(this.onlyNonProtectedBranches);
    }

    @Import(name="onlyProtectedBranches")
    private @Nullable Output<Boolean> onlyProtectedBranches;

    public Optional<Output<Boolean>> onlyProtectedBranches() {
        return Optional.ofNullable(this.onlyProtectedBranches);
    }

    @Import(name="repository", required=true)
    private Output<String> repository;

    public Output<String> repository() {
        return this.repository;
    }

    private GetRepositoryBranchesArgs() {}

    private GetRepositoryBranchesArgs(GetRepositoryBranchesArgs $) {
        this.onlyNonProtectedBranches = $.onlyNonProtectedBranches;
        this.onlyProtectedBranches = $.onlyProtectedBranches;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRepositoryBranchesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRepositoryBranchesArgs $;

        public Builder() {
            $ = new GetRepositoryBranchesArgs();
        }

        public Builder(GetRepositoryBranchesArgs defaults) {
            $ = new GetRepositoryBranchesArgs(Objects.requireNonNull(defaults));
        }

        public Builder onlyNonProtectedBranches(@Nullable Output<Boolean> onlyNonProtectedBranches) {
            $.onlyNonProtectedBranches = onlyNonProtectedBranches;
            return this;
        }

        public Builder onlyNonProtectedBranches(Boolean onlyNonProtectedBranches) {
            return onlyNonProtectedBranches(Output.of(onlyNonProtectedBranches));
        }

        public Builder onlyProtectedBranches(@Nullable Output<Boolean> onlyProtectedBranches) {
            $.onlyProtectedBranches = onlyProtectedBranches;
            return this;
        }

        public Builder onlyProtectedBranches(Boolean onlyProtectedBranches) {
            return onlyProtectedBranches(Output.of(onlyProtectedBranches));
        }

        public Builder repository(Output<String> repository) {
            $.repository = repository;
            return this;
        }

        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public GetRepositoryBranchesArgs build() {
            $.repository = Objects.requireNonNull($.repository, "expected parameter 'repository' to be non-null");
            return $;
        }
    }

}
