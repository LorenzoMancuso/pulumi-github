// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.github.Utilities;
import com.pulumi.github.inputs.GetActionsPublicKeyArgs;
import com.pulumi.github.inputs.GetActionsPublicKeyPlainArgs;
import com.pulumi.github.inputs.GetBranchArgs;
import com.pulumi.github.inputs.GetBranchPlainArgs;
import com.pulumi.github.inputs.GetCollaboratorsArgs;
import com.pulumi.github.inputs.GetCollaboratorsPlainArgs;
import com.pulumi.github.inputs.GetDependabotPublicKeyArgs;
import com.pulumi.github.inputs.GetDependabotPublicKeyPlainArgs;
import com.pulumi.github.inputs.GetMembershipArgs;
import com.pulumi.github.inputs.GetMembershipPlainArgs;
import com.pulumi.github.inputs.GetOrganizationArgs;
import com.pulumi.github.inputs.GetOrganizationPlainArgs;
import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
import com.pulumi.github.inputs.GetOrganizationTeamsPlainArgs;
import com.pulumi.github.inputs.GetRefArgs;
import com.pulumi.github.inputs.GetRefPlainArgs;
import com.pulumi.github.inputs.GetReleaseArgs;
import com.pulumi.github.inputs.GetReleasePlainArgs;
import com.pulumi.github.inputs.GetRepositoriesArgs;
import com.pulumi.github.inputs.GetRepositoriesPlainArgs;
import com.pulumi.github.inputs.GetRepositoryArgs;
import com.pulumi.github.inputs.GetRepositoryFileArgs;
import com.pulumi.github.inputs.GetRepositoryFilePlainArgs;
import com.pulumi.github.inputs.GetRepositoryMilestoneArgs;
import com.pulumi.github.inputs.GetRepositoryMilestonePlainArgs;
import com.pulumi.github.inputs.GetRepositoryPlainArgs;
import com.pulumi.github.inputs.GetRepositoryPullRequestArgs;
import com.pulumi.github.inputs.GetRepositoryPullRequestPlainArgs;
import com.pulumi.github.inputs.GetRepositoryPullRequestsArgs;
import com.pulumi.github.inputs.GetRepositoryPullRequestsPlainArgs;
import com.pulumi.github.inputs.GetTeamArgs;
import com.pulumi.github.inputs.GetTeamPlainArgs;
import com.pulumi.github.inputs.GetTreeArgs;
import com.pulumi.github.inputs.GetTreePlainArgs;
import com.pulumi.github.inputs.GetUserArgs;
import com.pulumi.github.inputs.GetUserPlainArgs;
import com.pulumi.github.inputs.GetUsersArgs;
import com.pulumi.github.inputs.GetUsersPlainArgs;
import com.pulumi.github.outputs.GetActionsPublicKeyResult;
import com.pulumi.github.outputs.GetBranchResult;
import com.pulumi.github.outputs.GetCollaboratorsResult;
import com.pulumi.github.outputs.GetDependabotPublicKeyResult;
import com.pulumi.github.outputs.GetIpRangesResult;
import com.pulumi.github.outputs.GetMembershipResult;
import com.pulumi.github.outputs.GetOrganizationResult;
import com.pulumi.github.outputs.GetOrganizationTeamSyncGroupsResult;
import com.pulumi.github.outputs.GetOrganizationTeamsResult;
import com.pulumi.github.outputs.GetRefResult;
import com.pulumi.github.outputs.GetReleaseResult;
import com.pulumi.github.outputs.GetRepositoriesResult;
import com.pulumi.github.outputs.GetRepositoryFileResult;
import com.pulumi.github.outputs.GetRepositoryMilestoneResult;
import com.pulumi.github.outputs.GetRepositoryPullRequestResult;
import com.pulumi.github.outputs.GetRepositoryPullRequestsInvokeResult;
import com.pulumi.github.outputs.GetRepositoryResult;
import com.pulumi.github.outputs.GetTeamResult;
import com.pulumi.github.outputs.GetTreeResult;
import com.pulumi.github.outputs.GetUserResult;
import com.pulumi.github.outputs.GetUsersResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class GithubFunctions {
    /**
     * Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to a repository to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsPublicKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsPublicKey(GetActionsPublicKeyArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsPublicKeyResult> getActionsPublicKey(GetActionsPublicKeyArgs args) {
        return getActionsPublicKey(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to a repository to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsPublicKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsPublicKey(GetActionsPublicKeyArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsPublicKeyResult> getActionsPublicKeyPlain(GetActionsPublicKeyPlainArgs args) {
        return getActionsPublicKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to a repository to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsPublicKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsPublicKey(GetActionsPublicKeyArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetActionsPublicKeyResult> getActionsPublicKey(GetActionsPublicKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getActionsPublicKey:getActionsPublicKey", TypeShape.of(GetActionsPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub Actions public key. This data source is required to be used with other GitHub secrets interactions.
     * Note that the provider `token` must have admin rights to a repository to retrieve it&#39;s action public key.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetActionsPublicKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getActionsPublicKey(GetActionsPublicKeyArgs.builder()
     *             .repository(&#34;example_repo&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetActionsPublicKeyResult> getActionsPublicKeyPlain(GetActionsPublicKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getActionsPublicKey:getActionsPublicKey", TypeShape.of(GetActionsPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a repository branch.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(&#34;development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBranchResult> getBranch(GetBranchArgs args) {
        return getBranch(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a repository branch.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(&#34;development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBranchResult> getBranchPlain(GetBranchPlainArgs args) {
        return getBranchPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a repository branch.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(&#34;development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetBranchResult> getBranch(GetBranchArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getBranch:getBranch", TypeShape.of(GetBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a repository branch.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(&#34;development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetBranchResult> getBranchPlain(GetBranchPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getBranch:getBranch", TypeShape.of(GetBranchResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the collaborators for a given repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetCollaboratorsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getCollaborators(GetCollaboratorsArgs.builder()
     *             .owner(&#34;example_owner&#34;)
     *             .repository(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCollaboratorsResult> getCollaborators(GetCollaboratorsArgs args) {
        return getCollaborators(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the collaborators for a given repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetCollaboratorsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getCollaborators(GetCollaboratorsArgs.builder()
     *             .owner(&#34;example_owner&#34;)
     *             .repository(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCollaboratorsResult> getCollaboratorsPlain(GetCollaboratorsPlainArgs args) {
        return getCollaboratorsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the collaborators for a given repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetCollaboratorsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getCollaborators(GetCollaboratorsArgs.builder()
     *             .owner(&#34;example_owner&#34;)
     *             .repository(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCollaboratorsResult> getCollaborators(GetCollaboratorsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getCollaborators:getCollaborators", TypeShape.of(GetCollaboratorsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the collaborators for a given repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetCollaboratorsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getCollaborators(GetCollaboratorsArgs.builder()
     *             .owner(&#34;example_owner&#34;)
     *             .repository(&#34;example_repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCollaboratorsResult> getCollaboratorsPlain(GetCollaboratorsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getCollaborators:getCollaborators", TypeShape.of(GetCollaboratorsResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetDependabotPublicKeyResult> getDependabotPublicKey(GetDependabotPublicKeyArgs args) {
        return getDependabotPublicKey(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetDependabotPublicKeyResult> getDependabotPublicKeyPlain(GetDependabotPublicKeyPlainArgs args) {
        return getDependabotPublicKeyPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetDependabotPublicKeyResult> getDependabotPublicKey(GetDependabotPublicKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getDependabotPublicKey:getDependabotPublicKey", TypeShape.of(GetDependabotPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetDependabotPublicKeyResult> getDependabotPublicKeyPlain(GetDependabotPublicKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getDependabotPublicKey:getDependabotPublicKey", TypeShape.of(GetDependabotPublicKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetIpRangesResult> getIpRanges() {
        return getIpRanges(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetIpRangesResult> getIpRangesPlain() {
        return getIpRangesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetIpRangesResult> getIpRanges(InvokeArgs args) {
        return getIpRanges(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetIpRangesResult> getIpRangesPlain(InvokeArgs args) {
        return getIpRangesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetIpRangesResult> getIpRanges(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getIpRanges:getIpRanges", TypeShape.of(GetIpRangesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about GitHub&#39;s IP addresses.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetIpRangesResult> getIpRangesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getIpRanges:getIpRanges", TypeShape.of(GetIpRangesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to find out if a user is a member of your organization, as well
     * as what role they have within it.
     * If the user&#39;s membership in the organization is pending their acceptance of an invite,
     * the role they would have once they accept will be returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var membershipForSomeUser = GithubFunctions.getMembership(GetMembershipArgs.builder()
     *             .username(&#34;SomeUser&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetMembershipResult> getMembership(GetMembershipArgs args) {
        return getMembership(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to find out if a user is a member of your organization, as well
     * as what role they have within it.
     * If the user&#39;s membership in the organization is pending their acceptance of an invite,
     * the role they would have once they accept will be returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var membershipForSomeUser = GithubFunctions.getMembership(GetMembershipArgs.builder()
     *             .username(&#34;SomeUser&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetMembershipResult> getMembershipPlain(GetMembershipPlainArgs args) {
        return getMembershipPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to find out if a user is a member of your organization, as well
     * as what role they have within it.
     * If the user&#39;s membership in the organization is pending their acceptance of an invite,
     * the role they would have once they accept will be returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var membershipForSomeUser = GithubFunctions.getMembership(GetMembershipArgs.builder()
     *             .username(&#34;SomeUser&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetMembershipResult> getMembership(GetMembershipArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getMembership:getMembership", TypeShape.of(GetMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to find out if a user is a member of your organization, as well
     * as what role they have within it.
     * If the user&#39;s membership in the organization is pending their acceptance of an invite,
     * the role they would have once they accept will be returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetMembershipArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var membershipForSomeUser = GithubFunctions.getMembership(GetMembershipArgs.builder()
     *             .username(&#34;SomeUser&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetMembershipResult> getMembershipPlain(GetMembershipPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getMembership:getMembership", TypeShape.of(GetMembershipResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve basic information about a GitHub Organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(&#34;github&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args) {
        return getOrganization(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve basic information about a GitHub Organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(&#34;github&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args) {
        return getOrganizationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve basic information about a GitHub Organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(&#34;github&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve basic information about a GitHub Organization.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = GithubFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .name(&#34;github&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroups() {
        return getOrganizationTeamSyncGroups(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroupsPlain() {
        return getOrganizationTeamSyncGroupsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroups(InvokeArgs args) {
        return getOrganizationTeamSyncGroups(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroupsPlain(InvokeArgs args) {
        return getOrganizationTeamSyncGroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroups(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getOrganizationTeamSyncGroups:getOrganizationTeamSyncGroups", TypeShape.of(GetOrganizationTeamSyncGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve the identity provider (IdP) groups for an organization.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetOrganizationTeamSyncGroupsResult> getOrganizationTeamSyncGroupsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getOrganizationTeamSyncGroups:getOrganizationTeamSyncGroups", TypeShape.of(GetOrganizationTeamSyncGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationTeamsResult> getOrganizationTeams() {
        return getOrganizationTeams(GetOrganizationTeamsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationTeamsResult> getOrganizationTeamsPlain() {
        return getOrganizationTeamsPlain(GetOrganizationTeamsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationTeamsResult> getOrganizationTeams(GetOrganizationTeamsArgs args) {
        return getOrganizationTeams(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationTeamsResult> getOrganizationTeamsPlain(GetOrganizationTeamsPlainArgs args) {
        return getOrganizationTeamsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationTeamsResult> getOrganizationTeams(GetOrganizationTeamsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getOrganizationTeams:getOrganizationTeams", TypeShape.of(GetOrganizationTeamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about all GitHub teams in an organization.
     * 
     * ## Example Usage
     * 
     * To retrieve *all* teams of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = GithubFunctions.getOrganizationTeams();
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve only the team&#39;s at the root of the organization:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetOrganizationTeamsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var rootTeams = GithubFunctions.getOrganizationTeams(GetOrganizationTeamsArgs.builder()
     *             .rootTeamsOnly(true)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationTeamsResult> getOrganizationTeamsPlain(GetOrganizationTeamsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getOrganizationTeams:getOrganizationTeams", TypeShape.of(GetOrganizationTeamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a repository ref.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRefArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getRef(GetRefArgs.builder()
     *             .ref(&#34;heads/development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRefResult> getRef(GetRefArgs args) {
        return getRef(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a repository ref.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRefArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getRef(GetRefArgs.builder()
     *             .ref(&#34;heads/development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRefResult> getRefPlain(GetRefPlainArgs args) {
        return getRefPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a repository ref.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRefArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getRef(GetRefArgs.builder()
     *             .ref(&#34;heads/development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRefResult> getRef(GetRefArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRef:getRef", TypeShape.of(GetRefResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a repository ref.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRefArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var development = GithubFunctions.getRef(GetRefArgs.builder()
     *             .ref(&#34;heads/development&#34;)
     *             .repository(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRefResult> getRefPlain(GetRefPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRef:getRef", TypeShape.of(GetRefResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub release in a specific repository.
     * 
     * ## Example Usage
     * 
     * To retrieve the latest release that is present in a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;latest&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve a specific release from a repository based on it&#39;s ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .id(12345)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Finally, to retrieve a release based on it&#39;s tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .releaseTag(&#34;v1.0.0&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;tag&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReleaseResult> getRelease(GetReleaseArgs args) {
        return getRelease(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub release in a specific repository.
     * 
     * ## Example Usage
     * 
     * To retrieve the latest release that is present in a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;latest&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve a specific release from a repository based on it&#39;s ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .id(12345)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Finally, to retrieve a release based on it&#39;s tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .releaseTag(&#34;v1.0.0&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;tag&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReleaseResult> getReleasePlain(GetReleasePlainArgs args) {
        return getReleasePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub release in a specific repository.
     * 
     * ## Example Usage
     * 
     * To retrieve the latest release that is present in a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;latest&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve a specific release from a repository based on it&#39;s ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .id(12345)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Finally, to retrieve a release based on it&#39;s tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .releaseTag(&#34;v1.0.0&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;tag&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReleaseResult> getRelease(GetReleaseArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRelease:getRelease", TypeShape.of(GetReleaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub release in a specific repository.
     * 
     * ## Example Usage
     * 
     * To retrieve the latest release that is present in a repository:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;latest&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * To retrieve a specific release from a repository based on it&#39;s ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .id(12345)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Finally, to retrieve a release based on it&#39;s tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetReleaseArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRelease(GetReleaseArgs.builder()
     *             .owner(&#34;example-owner&#34;)
     *             .releaseTag(&#34;v1.0.0&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .retrieveBy(&#34;tag&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReleaseResult> getReleasePlain(GetReleasePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRelease:getRelease", TypeShape.of(GetReleaseResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; **Note:** The data source will return a maximum of `1000` repositories
     * 	[as documented in official API docs](https://developer.github.com/v3/search/#about-the-search-api).
     * 
     * Use this data source to retrieve a list of GitHub repositories using a search query.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoriesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositories(GetRepositoriesArgs.builder()
     *             .query(&#34;org:hashicorp language:Go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoriesResult> getRepositories(GetRepositoriesArgs args) {
        return getRepositories(args, InvokeOptions.Empty);
    }
    /**
     * &gt; **Note:** The data source will return a maximum of `1000` repositories
     * 	[as documented in official API docs](https://developer.github.com/v3/search/#about-the-search-api).
     * 
     * Use this data source to retrieve a list of GitHub repositories using a search query.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoriesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositories(GetRepositoriesArgs.builder()
     *             .query(&#34;org:hashicorp language:Go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoriesResult> getRepositoriesPlain(GetRepositoriesPlainArgs args) {
        return getRepositoriesPlain(args, InvokeOptions.Empty);
    }
    /**
     * &gt; **Note:** The data source will return a maximum of `1000` repositories
     * 	[as documented in official API docs](https://developer.github.com/v3/search/#about-the-search-api).
     * 
     * Use this data source to retrieve a list of GitHub repositories using a search query.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoriesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositories(GetRepositoriesArgs.builder()
     *             .query(&#34;org:hashicorp language:Go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoriesResult> getRepositories(GetRepositoriesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositories:getRepositories", TypeShape.of(GetRepositoriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; **Note:** The data source will return a maximum of `1000` repositories
     * 	[as documented in official API docs](https://developer.github.com/v3/search/#about-the-search-api).
     * 
     * Use this data source to retrieve a list of GitHub repositories using a search query.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoriesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositories(GetRepositoriesArgs.builder()
     *             .query(&#34;org:hashicorp language:Go&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoriesResult> getRepositoriesPlain(GetRepositoriesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositories:getRepositories", TypeShape.of(GetRepositoriesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryResult> getRepository() {
        return getRepository(GetRepositoryArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryResult> getRepositoryPlain() {
        return getRepositoryPlain(GetRepositoryPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryResult> getRepository(GetRepositoryArgs args) {
        return getRepository(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryResult> getRepositoryPlain(GetRepositoryPlainArgs args) {
        return getRepositoryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryResult> getRepository(GetRepositoryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepository:getRepository", TypeShape.of(GetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .fullName(&#34;hashicorp/terraform&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryResult> getRepositoryPlain(GetRepositoryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepository:getRepository", TypeShape.of(GetRepositoryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source allows you to read files within a
     * GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GithubFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .repository(github_repository.foo().name())
     *             .branch(&#34;main&#34;)
     *             .file(&#34;.gitignore&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryFileResult> getRepositoryFile(GetRepositoryFileArgs args) {
        return getRepositoryFile(args, InvokeOptions.Empty);
    }
    /**
     * This data source allows you to read files within a
     * GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GithubFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .repository(github_repository.foo().name())
     *             .branch(&#34;main&#34;)
     *             .file(&#34;.gitignore&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryFileResult> getRepositoryFilePlain(GetRepositoryFilePlainArgs args) {
        return getRepositoryFilePlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source allows you to read files within a
     * GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GithubFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .repository(github_repository.foo().name())
     *             .branch(&#34;main&#34;)
     *             .file(&#34;.gitignore&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryFileResult> getRepositoryFile(GetRepositoryFileArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryFile:getRepositoryFile", TypeShape.of(GetRepositoryFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source allows you to read files within a
     * GitHub repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryFileArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = GithubFunctions.getRepositoryFile(GetRepositoryFileArgs.builder()
     *             .repository(github_repository.foo().name())
     *             .branch(&#34;main&#34;)
     *             .file(&#34;.gitignore&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryFileResult> getRepositoryFilePlain(GetRepositoryFilePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryFile:getRepositoryFile", TypeShape.of(GetRepositoryFileResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a specific GitHub milestone in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryMilestone(GetRepositoryMilestoneArgs.builder()
     *             .number(1)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryMilestoneResult> getRepositoryMilestone(GetRepositoryMilestoneArgs args) {
        return getRepositoryMilestone(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a specific GitHub milestone in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryMilestone(GetRepositoryMilestoneArgs.builder()
     *             .number(1)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryMilestoneResult> getRepositoryMilestonePlain(GetRepositoryMilestonePlainArgs args) {
        return getRepositoryMilestonePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a specific GitHub milestone in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryMilestone(GetRepositoryMilestoneArgs.builder()
     *             .number(1)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryMilestoneResult> getRepositoryMilestone(GetRepositoryMilestoneArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryMilestone:getRepositoryMilestone", TypeShape.of(GetRepositoryMilestoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a specific GitHub milestone in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryMilestoneArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryMilestone(GetRepositoryMilestoneArgs.builder()
     *             .number(1)
     *             .owner(&#34;example-owner&#34;)
     *             .repository(&#34;example-repository&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryMilestoneResult> getRepositoryMilestonePlain(GetRepositoryMilestonePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryMilestone:getRepositoryMilestone", TypeShape.of(GetRepositoryMilestoneResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a specific GitHub Pull Request in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequest(GetRepositoryPullRequestArgs.builder()
     *             .baseRepository(&#34;example_repository&#34;)
     *             .number(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryPullRequestResult> getRepositoryPullRequest(GetRepositoryPullRequestArgs args) {
        return getRepositoryPullRequest(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a specific GitHub Pull Request in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequest(GetRepositoryPullRequestArgs.builder()
     *             .baseRepository(&#34;example_repository&#34;)
     *             .number(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryPullRequestResult> getRepositoryPullRequestPlain(GetRepositoryPullRequestPlainArgs args) {
        return getRepositoryPullRequestPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a specific GitHub Pull Request in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequest(GetRepositoryPullRequestArgs.builder()
     *             .baseRepository(&#34;example_repository&#34;)
     *             .number(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryPullRequestResult> getRepositoryPullRequest(GetRepositoryPullRequestArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryPullRequest:getRepositoryPullRequest", TypeShape.of(GetRepositoryPullRequestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a specific GitHub Pull Request in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequest(GetRepositoryPullRequestArgs.builder()
     *             .baseRepository(&#34;example_repository&#34;)
     *             .number(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryPullRequestResult> getRepositoryPullRequestPlain(GetRepositoryPullRequestPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryPullRequest:getRepositoryPullRequest", TypeShape.of(GetRepositoryPullRequestResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequests(GetRepositoryPullRequestsArgs.builder()
     *             .baseRef(&#34;main&#34;)
     *             .baseRepository(&#34;example-repository&#34;)
     *             .sortBy(&#34;updated&#34;)
     *             .sortDirection(&#34;desc&#34;)
     *             .state(&#34;open&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryPullRequestsInvokeResult> getRepositoryPullRequests(GetRepositoryPullRequestsArgs args) {
        return getRepositoryPullRequests(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequests(GetRepositoryPullRequestsArgs.builder()
     *             .baseRef(&#34;main&#34;)
     *             .baseRepository(&#34;example-repository&#34;)
     *             .sortBy(&#34;updated&#34;)
     *             .sortDirection(&#34;desc&#34;)
     *             .state(&#34;open&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryPullRequestsInvokeResult> getRepositoryPullRequestsPlain(GetRepositoryPullRequestsPlainArgs args) {
        return getRepositoryPullRequestsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequests(GetRepositoryPullRequestsArgs.builder()
     *             .baseRef(&#34;main&#34;)
     *             .baseRepository(&#34;example-repository&#34;)
     *             .sortBy(&#34;updated&#34;)
     *             .sortDirection(&#34;desc&#34;)
     *             .state(&#34;open&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRepositoryPullRequestsInvokeResult> getRepositoryPullRequests(GetRepositoryPullRequestsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getRepositoryPullRequests:getRepositoryPullRequests", TypeShape.of(GetRepositoryPullRequestsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryPullRequestsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getRepositoryPullRequests(GetRepositoryPullRequestsArgs.builder()
     *             .baseRef(&#34;main&#34;)
     *             .baseRepository(&#34;example-repository&#34;)
     *             .sortBy(&#34;updated&#34;)
     *             .sortDirection(&#34;desc&#34;)
     *             .state(&#34;open&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRepositoryPullRequestsInvokeResult> getRepositoryPullRequestsPlain(GetRepositoryPullRequestsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getRepositoryPullRequests:getRepositoryPullRequests", TypeShape.of(GetRepositoryPullRequestsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub team.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getTeam(GetTeamArgs.builder()
     *             .slug(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTeamResult> getTeam(GetTeamArgs args) {
        return getTeam(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub team.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getTeam(GetTeamArgs.builder()
     *             .slug(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTeamResult> getTeamPlain(GetTeamPlainArgs args) {
        return getTeamPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub team.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getTeam(GetTeamArgs.builder()
     *             .slug(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTeamResult> getTeam(GetTeamArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getTeam:getTeam", TypeShape.of(GetTeamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub team.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getTeam(GetTeamArgs.builder()
     *             .slug(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTeamResult> getTeamPlain(GetTeamPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getTeam:getTeam", TypeShape.of(GetTeamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a single tree.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import com.pulumi.github.inputs.GetTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var thisRepository = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         final var thisBranch = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.defaultBranch()))
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .build());
     * 
     *         final var thisTree = GithubFunctions.getTree(GetTreeArgs.builder()
     *             .recursive(false)
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .treeSha(thisBranch.applyValue(getBranchResult -&gt; getBranchResult.sha()))
     *             .build());
     * 
     *         ctx.export(&#34;entries&#34;, thisTree.applyValue(getTreeResult -&gt; getTreeResult.entries()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTreeResult> getTree(GetTreeArgs args) {
        return getTree(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a single tree.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import com.pulumi.github.inputs.GetTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var thisRepository = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         final var thisBranch = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.defaultBranch()))
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .build());
     * 
     *         final var thisTree = GithubFunctions.getTree(GetTreeArgs.builder()
     *             .recursive(false)
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .treeSha(thisBranch.applyValue(getBranchResult -&gt; getBranchResult.sha()))
     *             .build());
     * 
     *         ctx.export(&#34;entries&#34;, thisTree.applyValue(getTreeResult -&gt; getTreeResult.entries()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTreeResult> getTreePlain(GetTreePlainArgs args) {
        return getTreePlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a single tree.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import com.pulumi.github.inputs.GetTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var thisRepository = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         final var thisBranch = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.defaultBranch()))
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .build());
     * 
     *         final var thisTree = GithubFunctions.getTree(GetTreeArgs.builder()
     *             .recursive(false)
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .treeSha(thisBranch.applyValue(getBranchResult -&gt; getBranchResult.sha()))
     *             .build());
     * 
     *         ctx.export(&#34;entries&#34;, thisTree.applyValue(getTreeResult -&gt; getTreeResult.entries()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTreeResult> getTree(GetTreeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getTree:getTree", TypeShape.of(GetTreeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a single tree.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetRepositoryArgs;
     * import com.pulumi.github.inputs.GetBranchArgs;
     * import com.pulumi.github.inputs.GetTreeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var thisRepository = GithubFunctions.getRepository(GetRepositoryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         final var thisBranch = GithubFunctions.getBranch(GetBranchArgs.builder()
     *             .branch(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.defaultBranch()))
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .build());
     * 
     *         final var thisTree = GithubFunctions.getTree(GetTreeArgs.builder()
     *             .recursive(false)
     *             .repository(thisRepository.applyValue(getRepositoryResult -&gt; getRepositoryResult.name()))
     *             .treeSha(thisBranch.applyValue(getBranchResult -&gt; getBranchResult.sha()))
     *             .build());
     * 
     *         ctx.export(&#34;entries&#34;, thisTree.applyValue(getTreeResult -&gt; getTreeResult.entries()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTreeResult> getTreePlain(GetTreePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getTree:getTree", TypeShape.of(GetTreeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub user.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;example&#34;)
     *             .build());
     * 
     *         final var current = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;currentGithubLogin&#34;, current.applyValue(getUserResult -&gt; getUserResult.login()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args) {
        return getUser(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub user.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;example&#34;)
     *             .build());
     * 
     *         final var current = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;currentGithubLogin&#34;, current.applyValue(getUserResult -&gt; getUserResult.login()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args) {
        return getUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about a GitHub user.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;example&#34;)
     *             .build());
     * 
     *         final var current = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;currentGithubLogin&#34;, current.applyValue(getUserResult -&gt; getUserResult.login()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUserResult> getUser(GetUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about a GitHub user.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;example&#34;)
     *             .build());
     * 
     *         final var current = GithubFunctions.getUser(GetUserArgs.builder()
     *             .username(&#34;&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;currentGithubLogin&#34;, current.applyValue(getUserResult -&gt; getUserResult.login()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUserResult> getUserPlain(GetUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getUser:getUser", TypeShape.of(GetUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about multiple GitHub users at once.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUsers(GetUsersArgs.builder()
     *             .usernames(            
     *                 &#34;example1&#34;,
     *                 &#34;example2&#34;,
     *                 &#34;example3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;validUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.logins()));
     *         ctx.export(&#34;invalidUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.unknownLogins()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args) {
        return getUsers(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about multiple GitHub users at once.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUsers(GetUsersArgs.builder()
     *             .usernames(            
     *                 &#34;example1&#34;,
     *                 &#34;example2&#34;,
     *                 &#34;example3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;validUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.logins()));
     *         ctx.export(&#34;invalidUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.unknownLogins()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args) {
        return getUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Use this data source to retrieve information about multiple GitHub users at once.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUsers(GetUsersArgs.builder()
     *             .usernames(            
     *                 &#34;example1&#34;,
     *                 &#34;example2&#34;,
     *                 &#34;example3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;validUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.logins()));
     *         ctx.export(&#34;invalidUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.unknownLogins()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetUsersResult> getUsers(GetUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("github:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Use this data source to retrieve information about multiple GitHub users at once.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.github.GithubFunctions;
     * import com.pulumi.github.inputs.GetUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = GithubFunctions.getUsers(GetUsersArgs.builder()
     *             .usernames(            
     *                 &#34;example1&#34;,
     *                 &#34;example2&#34;,
     *                 &#34;example3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;validUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.logins()));
     *         ctx.export(&#34;invalidUsers&#34;, example.applyValue(getUsersResult -&gt; getUsersResult.unknownLogins()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetUsersResult> getUsersPlain(GetUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("github:index/getUsers:getUsers", TypeShape.of(GetUsersResult.class), args, Utilities.withVersion(options));
    }
}
