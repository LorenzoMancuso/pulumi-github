// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetReleaseResult {
    /**
     * @return URL of any associated assets with the release
     * 
     */
    private final String assertsUrl;
    /**
     * @return Contents of the description (body) of a release
     * 
     */
    private final String body;
    /**
     * @return Date of release creation
     * 
     */
    private final String createdAt;
    /**
     * @return (`Boolean`) indicates whether the release is a draft
     * 
     */
    private final Boolean draft;
    /**
     * @return URL directing to detailed information on the release
     * 
     */
    private final String htmlUrl;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return Name of release
     * 
     */
    private final String name;
    private final String owner;
    /**
     * @return (`Boolean`) indicates whether the release is a prerelease
     * 
     */
    private final Boolean prerelease;
    /**
     * @return Date of release publishing
     * 
     */
    private final String publishedAt;
    /**
     * @return ID of release
     * 
     */
    private final @Nullable Integer releaseId;
    /**
     * @return Tag of release
     * 
     */
    private final @Nullable String releaseTag;
    private final String repository;
    private final String retrieveBy;
    /**
     * @return Download URL of a specific release in `tar.gz` format
     * 
     */
    private final String tarballUrl;
    /**
     * @return Commitish value that determines where the Git release is created from
     * 
     */
    private final String targetCommitish;
    /**
     * @return URL that can be used to upload Assets to the release
     * 
     */
    private final String uploadUrl;
    /**
     * @return Base URL of the release
     * 
     */
    private final String url;
    /**
     * @return Download URL of a specific release in `zip` format
     * 
     */
    private final String zipballUrl;

    @CustomType.Constructor
    private GetReleaseResult(
        @CustomType.Parameter("assertsUrl") String assertsUrl,
        @CustomType.Parameter("body") String body,
        @CustomType.Parameter("createdAt") String createdAt,
        @CustomType.Parameter("draft") Boolean draft,
        @CustomType.Parameter("htmlUrl") String htmlUrl,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("owner") String owner,
        @CustomType.Parameter("prerelease") Boolean prerelease,
        @CustomType.Parameter("publishedAt") String publishedAt,
        @CustomType.Parameter("releaseId") @Nullable Integer releaseId,
        @CustomType.Parameter("releaseTag") @Nullable String releaseTag,
        @CustomType.Parameter("repository") String repository,
        @CustomType.Parameter("retrieveBy") String retrieveBy,
        @CustomType.Parameter("tarballUrl") String tarballUrl,
        @CustomType.Parameter("targetCommitish") String targetCommitish,
        @CustomType.Parameter("uploadUrl") String uploadUrl,
        @CustomType.Parameter("url") String url,
        @CustomType.Parameter("zipballUrl") String zipballUrl) {
        this.assertsUrl = assertsUrl;
        this.body = body;
        this.createdAt = createdAt;
        this.draft = draft;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.name = name;
        this.owner = owner;
        this.prerelease = prerelease;
        this.publishedAt = publishedAt;
        this.releaseId = releaseId;
        this.releaseTag = releaseTag;
        this.repository = repository;
        this.retrieveBy = retrieveBy;
        this.tarballUrl = tarballUrl;
        this.targetCommitish = targetCommitish;
        this.uploadUrl = uploadUrl;
        this.url = url;
        this.zipballUrl = zipballUrl;
    }

    /**
     * @return URL of any associated assets with the release
     * 
     */
    public String assertsUrl() {
        return this.assertsUrl;
    }
    /**
     * @return Contents of the description (body) of a release
     * 
     */
    public String body() {
        return this.body;
    }
    /**
     * @return Date of release creation
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return (`Boolean`) indicates whether the release is a draft
     * 
     */
    public Boolean draft() {
        return this.draft;
    }
    /**
     * @return URL directing to detailed information on the release
     * 
     */
    public String htmlUrl() {
        return this.htmlUrl;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of release
     * 
     */
    public String name() {
        return this.name;
    }
    public String owner() {
        return this.owner;
    }
    /**
     * @return (`Boolean`) indicates whether the release is a prerelease
     * 
     */
    public Boolean prerelease() {
        return this.prerelease;
    }
    /**
     * @return Date of release publishing
     * 
     */
    public String publishedAt() {
        return this.publishedAt;
    }
    /**
     * @return ID of release
     * 
     */
    public Optional<Integer> releaseId() {
        return Optional.ofNullable(this.releaseId);
    }
    /**
     * @return Tag of release
     * 
     */
    public Optional<String> releaseTag() {
        return Optional.ofNullable(this.releaseTag);
    }
    public String repository() {
        return this.repository;
    }
    public String retrieveBy() {
        return this.retrieveBy;
    }
    /**
     * @return Download URL of a specific release in `tar.gz` format
     * 
     */
    public String tarballUrl() {
        return this.tarballUrl;
    }
    /**
     * @return Commitish value that determines where the Git release is created from
     * 
     */
    public String targetCommitish() {
        return this.targetCommitish;
    }
    /**
     * @return URL that can be used to upload Assets to the release
     * 
     */
    public String uploadUrl() {
        return this.uploadUrl;
    }
    /**
     * @return Base URL of the release
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return Download URL of a specific release in `zip` format
     * 
     */
    public String zipballUrl() {
        return this.zipballUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetReleaseResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String assertsUrl;
        private String body;
        private String createdAt;
        private Boolean draft;
        private String htmlUrl;
        private String id;
        private String name;
        private String owner;
        private Boolean prerelease;
        private String publishedAt;
        private @Nullable Integer releaseId;
        private @Nullable String releaseTag;
        private String repository;
        private String retrieveBy;
        private String tarballUrl;
        private String targetCommitish;
        private String uploadUrl;
        private String url;
        private String zipballUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(GetReleaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assertsUrl = defaults.assertsUrl;
    	      this.body = defaults.body;
    	      this.createdAt = defaults.createdAt;
    	      this.draft = defaults.draft;
    	      this.htmlUrl = defaults.htmlUrl;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.owner = defaults.owner;
    	      this.prerelease = defaults.prerelease;
    	      this.publishedAt = defaults.publishedAt;
    	      this.releaseId = defaults.releaseId;
    	      this.releaseTag = defaults.releaseTag;
    	      this.repository = defaults.repository;
    	      this.retrieveBy = defaults.retrieveBy;
    	      this.tarballUrl = defaults.tarballUrl;
    	      this.targetCommitish = defaults.targetCommitish;
    	      this.uploadUrl = defaults.uploadUrl;
    	      this.url = defaults.url;
    	      this.zipballUrl = defaults.zipballUrl;
        }

        public Builder assertsUrl(String assertsUrl) {
            this.assertsUrl = Objects.requireNonNull(assertsUrl);
            return this;
        }
        public Builder body(String body) {
            this.body = Objects.requireNonNull(body);
            return this;
        }
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        public Builder draft(Boolean draft) {
            this.draft = Objects.requireNonNull(draft);
            return this;
        }
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = Objects.requireNonNull(htmlUrl);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder owner(String owner) {
            this.owner = Objects.requireNonNull(owner);
            return this;
        }
        public Builder prerelease(Boolean prerelease) {
            this.prerelease = Objects.requireNonNull(prerelease);
            return this;
        }
        public Builder publishedAt(String publishedAt) {
            this.publishedAt = Objects.requireNonNull(publishedAt);
            return this;
        }
        public Builder releaseId(@Nullable Integer releaseId) {
            this.releaseId = releaseId;
            return this;
        }
        public Builder releaseTag(@Nullable String releaseTag) {
            this.releaseTag = releaseTag;
            return this;
        }
        public Builder repository(String repository) {
            this.repository = Objects.requireNonNull(repository);
            return this;
        }
        public Builder retrieveBy(String retrieveBy) {
            this.retrieveBy = Objects.requireNonNull(retrieveBy);
            return this;
        }
        public Builder tarballUrl(String tarballUrl) {
            this.tarballUrl = Objects.requireNonNull(tarballUrl);
            return this;
        }
        public Builder targetCommitish(String targetCommitish) {
            this.targetCommitish = Objects.requireNonNull(targetCommitish);
            return this;
        }
        public Builder uploadUrl(String uploadUrl) {
            this.uploadUrl = Objects.requireNonNull(uploadUrl);
            return this;
        }
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        public Builder zipballUrl(String zipballUrl) {
            this.zipballUrl = Objects.requireNonNull(zipballUrl);
            return this;
        }        public GetReleaseResult build() {
            return new GetReleaseResult(assertsUrl, body, createdAt, draft, htmlUrl, id, name, owner, prerelease, publishedAt, releaseId, releaseTag, repository, retrieveBy, tarballUrl, targetCommitish, uploadUrl, url, zipballUrl);
        }
    }
}
