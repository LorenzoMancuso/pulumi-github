// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCollaboratorsCollaborator {
    /**
     * @return The GitHub API URL for the collaborator&#39;s events.
     * 
     */
    private final String eventsUrl;
    /**
     * @return The GitHub API URL for the collaborator&#39;s followers.
     * 
     */
    private final String followersUrl;
    /**
     * @return The GitHub API URL for those following the collaborator.
     * 
     */
    private final String followingUrl;
    /**
     * @return The GitHub API URL for the collaborator&#39;s gists.
     * 
     */
    private final String gistsUrl;
    /**
     * @return The GitHub HTML URL for the collaborator.
     * 
     */
    private final String htmlUrl;
    /**
     * @return The ID of the collaborator.
     * 
     */
    private final Integer id;
    /**
     * @return The collaborator&#39;s login.
     * 
     */
    private final String login;
    /**
     * @return The GitHub API URL for the collaborator&#39;s organizations.
     * 
     */
    private final String organizationsUrl;
    /**
     * @return The permission of the collaborator.
     * 
     */
    private final String permission;
    /**
     * @return The GitHub API URL for the collaborator&#39;s received events.
     * 
     */
    private final String receivedEventsUrl;
    /**
     * @return The GitHub API URL for the collaborator&#39;s repositories.
     * 
     */
    private final String reposUrl;
    /**
     * @return Whether the user is a GitHub admin.
     * 
     */
    private final Boolean siteAdmin;
    /**
     * @return The GitHub API URL for the collaborator&#39;s starred repositories.
     * 
     */
    private final String starredUrl;
    /**
     * @return The GitHub API URL for the collaborator&#39;s subscribed repositories.
     * 
     */
    private final String subscriptionsUrl;
    /**
     * @return The type of the collaborator (ex. `user`).
     * 
     */
    private final String type;
    /**
     * @return The GitHub API URL for the collaborator.
     * 
     */
    private final String url;

    @CustomType.Constructor
    private GetCollaboratorsCollaborator(
        @CustomType.Parameter("eventsUrl") String eventsUrl,
        @CustomType.Parameter("followersUrl") String followersUrl,
        @CustomType.Parameter("followingUrl") String followingUrl,
        @CustomType.Parameter("gistsUrl") String gistsUrl,
        @CustomType.Parameter("htmlUrl") String htmlUrl,
        @CustomType.Parameter("id") Integer id,
        @CustomType.Parameter("login") String login,
        @CustomType.Parameter("organizationsUrl") String organizationsUrl,
        @CustomType.Parameter("permission") String permission,
        @CustomType.Parameter("receivedEventsUrl") String receivedEventsUrl,
        @CustomType.Parameter("reposUrl") String reposUrl,
        @CustomType.Parameter("siteAdmin") Boolean siteAdmin,
        @CustomType.Parameter("starredUrl") String starredUrl,
        @CustomType.Parameter("subscriptionsUrl") String subscriptionsUrl,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("url") String url) {
        this.eventsUrl = eventsUrl;
        this.followersUrl = followersUrl;
        this.followingUrl = followingUrl;
        this.gistsUrl = gistsUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.login = login;
        this.organizationsUrl = organizationsUrl;
        this.permission = permission;
        this.receivedEventsUrl = receivedEventsUrl;
        this.reposUrl = reposUrl;
        this.siteAdmin = siteAdmin;
        this.starredUrl = starredUrl;
        this.subscriptionsUrl = subscriptionsUrl;
        this.type = type;
        this.url = url;
    }

    /**
     * @return The GitHub API URL for the collaborator&#39;s events.
     * 
     */
    public String eventsUrl() {
        return this.eventsUrl;
    }
    /**
     * @return The GitHub API URL for the collaborator&#39;s followers.
     * 
     */
    public String followersUrl() {
        return this.followersUrl;
    }
    /**
     * @return The GitHub API URL for those following the collaborator.
     * 
     */
    public String followingUrl() {
        return this.followingUrl;
    }
    /**
     * @return The GitHub API URL for the collaborator&#39;s gists.
     * 
     */
    public String gistsUrl() {
        return this.gistsUrl;
    }
    /**
     * @return The GitHub HTML URL for the collaborator.
     * 
     */
    public String htmlUrl() {
        return this.htmlUrl;
    }
    /**
     * @return The ID of the collaborator.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The collaborator&#39;s login.
     * 
     */
    public String login() {
        return this.login;
    }
    /**
     * @return The GitHub API URL for the collaborator&#39;s organizations.
     * 
     */
    public String organizationsUrl() {
        return this.organizationsUrl;
    }
    /**
     * @return The permission of the collaborator.
     * 
     */
    public String permission() {
        return this.permission;
    }
    /**
     * @return The GitHub API URL for the collaborator&#39;s received events.
     * 
     */
    public String receivedEventsUrl() {
        return this.receivedEventsUrl;
    }
    /**
     * @return The GitHub API URL for the collaborator&#39;s repositories.
     * 
     */
    public String reposUrl() {
        return this.reposUrl;
    }
    /**
     * @return Whether the user is a GitHub admin.
     * 
     */
    public Boolean siteAdmin() {
        return this.siteAdmin;
    }
    /**
     * @return The GitHub API URL for the collaborator&#39;s starred repositories.
     * 
     */
    public String starredUrl() {
        return this.starredUrl;
    }
    /**
     * @return The GitHub API URL for the collaborator&#39;s subscribed repositories.
     * 
     */
    public String subscriptionsUrl() {
        return this.subscriptionsUrl;
    }
    /**
     * @return The type of the collaborator (ex. `user`).
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The GitHub API URL for the collaborator.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCollaboratorsCollaborator defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String eventsUrl;
        private String followersUrl;
        private String followingUrl;
        private String gistsUrl;
        private String htmlUrl;
        private Integer id;
        private String login;
        private String organizationsUrl;
        private String permission;
        private String receivedEventsUrl;
        private String reposUrl;
        private Boolean siteAdmin;
        private String starredUrl;
        private String subscriptionsUrl;
        private String type;
        private String url;

        public Builder() {
    	      // Empty
        }

        public Builder(GetCollaboratorsCollaborator defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eventsUrl = defaults.eventsUrl;
    	      this.followersUrl = defaults.followersUrl;
    	      this.followingUrl = defaults.followingUrl;
    	      this.gistsUrl = defaults.gistsUrl;
    	      this.htmlUrl = defaults.htmlUrl;
    	      this.id = defaults.id;
    	      this.login = defaults.login;
    	      this.organizationsUrl = defaults.organizationsUrl;
    	      this.permission = defaults.permission;
    	      this.receivedEventsUrl = defaults.receivedEventsUrl;
    	      this.reposUrl = defaults.reposUrl;
    	      this.siteAdmin = defaults.siteAdmin;
    	      this.starredUrl = defaults.starredUrl;
    	      this.subscriptionsUrl = defaults.subscriptionsUrl;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
        }

        public Builder eventsUrl(String eventsUrl) {
            this.eventsUrl = Objects.requireNonNull(eventsUrl);
            return this;
        }
        public Builder followersUrl(String followersUrl) {
            this.followersUrl = Objects.requireNonNull(followersUrl);
            return this;
        }
        public Builder followingUrl(String followingUrl) {
            this.followingUrl = Objects.requireNonNull(followingUrl);
            return this;
        }
        public Builder gistsUrl(String gistsUrl) {
            this.gistsUrl = Objects.requireNonNull(gistsUrl);
            return this;
        }
        public Builder htmlUrl(String htmlUrl) {
            this.htmlUrl = Objects.requireNonNull(htmlUrl);
            return this;
        }
        public Builder id(Integer id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder login(String login) {
            this.login = Objects.requireNonNull(login);
            return this;
        }
        public Builder organizationsUrl(String organizationsUrl) {
            this.organizationsUrl = Objects.requireNonNull(organizationsUrl);
            return this;
        }
        public Builder permission(String permission) {
            this.permission = Objects.requireNonNull(permission);
            return this;
        }
        public Builder receivedEventsUrl(String receivedEventsUrl) {
            this.receivedEventsUrl = Objects.requireNonNull(receivedEventsUrl);
            return this;
        }
        public Builder reposUrl(String reposUrl) {
            this.reposUrl = Objects.requireNonNull(reposUrl);
            return this;
        }
        public Builder siteAdmin(Boolean siteAdmin) {
            this.siteAdmin = Objects.requireNonNull(siteAdmin);
            return this;
        }
        public Builder starredUrl(String starredUrl) {
            this.starredUrl = Objects.requireNonNull(starredUrl);
            return this;
        }
        public Builder subscriptionsUrl(String subscriptionsUrl) {
            this.subscriptionsUrl = Objects.requireNonNull(subscriptionsUrl);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }        public GetCollaboratorsCollaborator build() {
            return new GetCollaboratorsCollaborator(eventsUrl, followersUrl, followingUrl, gistsUrl, htmlUrl, id, login, organizationsUrl, permission, receivedEventsUrl, reposUrl, siteAdmin, starredUrl, subscriptionsUrl, type, url);
        }
    }
}
