// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to create and manage environments for a GitHub repository.
type RepositoryEnvironment struct {
	pulumi.CustomResourceState

	DeploymentBranchPolicy RepositoryEnvironmentDeploymentBranchPolicyPtrOutput `pulumi:"deploymentBranchPolicy"`
	// The name of the environment.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The repository of the environment.
	Repository pulumi.StringOutput                      `pulumi:"repository"`
	Reviewers  RepositoryEnvironmentReviewerArrayOutput `pulumi:"reviewers"`
	// Amount of time to delay a job after the job is initially triggered.
	WaitTimer pulumi.IntPtrOutput `pulumi:"waitTimer"`
}

// NewRepositoryEnvironment registers a new resource with the given unique name, arguments, and options.
func NewRepositoryEnvironment(ctx *pulumi.Context,
	name string, args *RepositoryEnvironmentArgs, opts ...pulumi.ResourceOption) (*RepositoryEnvironment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	var resource RepositoryEnvironment
	err := ctx.RegisterResource("github:index/repositoryEnvironment:RepositoryEnvironment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryEnvironment gets an existing RepositoryEnvironment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryEnvironment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryEnvironmentState, opts ...pulumi.ResourceOption) (*RepositoryEnvironment, error) {
	var resource RepositoryEnvironment
	err := ctx.ReadResource("github:index/repositoryEnvironment:RepositoryEnvironment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryEnvironment resources.
type repositoryEnvironmentState struct {
	DeploymentBranchPolicy *RepositoryEnvironmentDeploymentBranchPolicy `pulumi:"deploymentBranchPolicy"`
	// The name of the environment.
	Environment *string `pulumi:"environment"`
	// The repository of the environment.
	Repository *string                         `pulumi:"repository"`
	Reviewers  []RepositoryEnvironmentReviewer `pulumi:"reviewers"`
	// Amount of time to delay a job after the job is initially triggered.
	WaitTimer *int `pulumi:"waitTimer"`
}

type RepositoryEnvironmentState struct {
	DeploymentBranchPolicy RepositoryEnvironmentDeploymentBranchPolicyPtrInput
	// The name of the environment.
	Environment pulumi.StringPtrInput
	// The repository of the environment.
	Repository pulumi.StringPtrInput
	Reviewers  RepositoryEnvironmentReviewerArrayInput
	// Amount of time to delay a job after the job is initially triggered.
	WaitTimer pulumi.IntPtrInput
}

func (RepositoryEnvironmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryEnvironmentState)(nil)).Elem()
}

type repositoryEnvironmentArgs struct {
	DeploymentBranchPolicy *RepositoryEnvironmentDeploymentBranchPolicy `pulumi:"deploymentBranchPolicy"`
	// The name of the environment.
	Environment string `pulumi:"environment"`
	// The repository of the environment.
	Repository string                          `pulumi:"repository"`
	Reviewers  []RepositoryEnvironmentReviewer `pulumi:"reviewers"`
	// Amount of time to delay a job after the job is initially triggered.
	WaitTimer *int `pulumi:"waitTimer"`
}

// The set of arguments for constructing a RepositoryEnvironment resource.
type RepositoryEnvironmentArgs struct {
	DeploymentBranchPolicy RepositoryEnvironmentDeploymentBranchPolicyPtrInput
	// The name of the environment.
	Environment pulumi.StringInput
	// The repository of the environment.
	Repository pulumi.StringInput
	Reviewers  RepositoryEnvironmentReviewerArrayInput
	// Amount of time to delay a job after the job is initially triggered.
	WaitTimer pulumi.IntPtrInput
}

func (RepositoryEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryEnvironmentArgs)(nil)).Elem()
}

type RepositoryEnvironmentInput interface {
	pulumi.Input

	ToRepositoryEnvironmentOutput() RepositoryEnvironmentOutput
	ToRepositoryEnvironmentOutputWithContext(ctx context.Context) RepositoryEnvironmentOutput
}

func (*RepositoryEnvironment) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEnvironment)(nil))
}

func (i *RepositoryEnvironment) ToRepositoryEnvironmentOutput() RepositoryEnvironmentOutput {
	return i.ToRepositoryEnvironmentOutputWithContext(context.Background())
}

func (i *RepositoryEnvironment) ToRepositoryEnvironmentOutputWithContext(ctx context.Context) RepositoryEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEnvironmentOutput)
}

func (i *RepositoryEnvironment) ToRepositoryEnvironmentPtrOutput() RepositoryEnvironmentPtrOutput {
	return i.ToRepositoryEnvironmentPtrOutputWithContext(context.Background())
}

func (i *RepositoryEnvironment) ToRepositoryEnvironmentPtrOutputWithContext(ctx context.Context) RepositoryEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEnvironmentPtrOutput)
}

type RepositoryEnvironmentPtrInput interface {
	pulumi.Input

	ToRepositoryEnvironmentPtrOutput() RepositoryEnvironmentPtrOutput
	ToRepositoryEnvironmentPtrOutputWithContext(ctx context.Context) RepositoryEnvironmentPtrOutput
}

type repositoryEnvironmentPtrType RepositoryEnvironmentArgs

func (*repositoryEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryEnvironment)(nil))
}

func (i *repositoryEnvironmentPtrType) ToRepositoryEnvironmentPtrOutput() RepositoryEnvironmentPtrOutput {
	return i.ToRepositoryEnvironmentPtrOutputWithContext(context.Background())
}

func (i *repositoryEnvironmentPtrType) ToRepositoryEnvironmentPtrOutputWithContext(ctx context.Context) RepositoryEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEnvironmentPtrOutput)
}

// RepositoryEnvironmentArrayInput is an input type that accepts RepositoryEnvironmentArray and RepositoryEnvironmentArrayOutput values.
// You can construct a concrete instance of `RepositoryEnvironmentArrayInput` via:
//
//          RepositoryEnvironmentArray{ RepositoryEnvironmentArgs{...} }
type RepositoryEnvironmentArrayInput interface {
	pulumi.Input

	ToRepositoryEnvironmentArrayOutput() RepositoryEnvironmentArrayOutput
	ToRepositoryEnvironmentArrayOutputWithContext(context.Context) RepositoryEnvironmentArrayOutput
}

type RepositoryEnvironmentArray []RepositoryEnvironmentInput

func (RepositoryEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*RepositoryEnvironment)(nil))
}

func (i RepositoryEnvironmentArray) ToRepositoryEnvironmentArrayOutput() RepositoryEnvironmentArrayOutput {
	return i.ToRepositoryEnvironmentArrayOutputWithContext(context.Background())
}

func (i RepositoryEnvironmentArray) ToRepositoryEnvironmentArrayOutputWithContext(ctx context.Context) RepositoryEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEnvironmentArrayOutput)
}

// RepositoryEnvironmentMapInput is an input type that accepts RepositoryEnvironmentMap and RepositoryEnvironmentMapOutput values.
// You can construct a concrete instance of `RepositoryEnvironmentMapInput` via:
//
//          RepositoryEnvironmentMap{ "key": RepositoryEnvironmentArgs{...} }
type RepositoryEnvironmentMapInput interface {
	pulumi.Input

	ToRepositoryEnvironmentMapOutput() RepositoryEnvironmentMapOutput
	ToRepositoryEnvironmentMapOutputWithContext(context.Context) RepositoryEnvironmentMapOutput
}

type RepositoryEnvironmentMap map[string]RepositoryEnvironmentInput

func (RepositoryEnvironmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*RepositoryEnvironment)(nil))
}

func (i RepositoryEnvironmentMap) ToRepositoryEnvironmentMapOutput() RepositoryEnvironmentMapOutput {
	return i.ToRepositoryEnvironmentMapOutputWithContext(context.Background())
}

func (i RepositoryEnvironmentMap) ToRepositoryEnvironmentMapOutputWithContext(ctx context.Context) RepositoryEnvironmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEnvironmentMapOutput)
}

type RepositoryEnvironmentOutput struct {
	*pulumi.OutputState
}

func (RepositoryEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEnvironment)(nil))
}

func (o RepositoryEnvironmentOutput) ToRepositoryEnvironmentOutput() RepositoryEnvironmentOutput {
	return o
}

func (o RepositoryEnvironmentOutput) ToRepositoryEnvironmentOutputWithContext(ctx context.Context) RepositoryEnvironmentOutput {
	return o
}

func (o RepositoryEnvironmentOutput) ToRepositoryEnvironmentPtrOutput() RepositoryEnvironmentPtrOutput {
	return o.ToRepositoryEnvironmentPtrOutputWithContext(context.Background())
}

func (o RepositoryEnvironmentOutput) ToRepositoryEnvironmentPtrOutputWithContext(ctx context.Context) RepositoryEnvironmentPtrOutput {
	return o.ApplyT(func(v RepositoryEnvironment) *RepositoryEnvironment {
		return &v
	}).(RepositoryEnvironmentPtrOutput)
}

type RepositoryEnvironmentPtrOutput struct {
	*pulumi.OutputState
}

func (RepositoryEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryEnvironment)(nil))
}

func (o RepositoryEnvironmentPtrOutput) ToRepositoryEnvironmentPtrOutput() RepositoryEnvironmentPtrOutput {
	return o
}

func (o RepositoryEnvironmentPtrOutput) ToRepositoryEnvironmentPtrOutputWithContext(ctx context.Context) RepositoryEnvironmentPtrOutput {
	return o
}

type RepositoryEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (RepositoryEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoryEnvironment)(nil))
}

func (o RepositoryEnvironmentArrayOutput) ToRepositoryEnvironmentArrayOutput() RepositoryEnvironmentArrayOutput {
	return o
}

func (o RepositoryEnvironmentArrayOutput) ToRepositoryEnvironmentArrayOutputWithContext(ctx context.Context) RepositoryEnvironmentArrayOutput {
	return o
}

func (o RepositoryEnvironmentArrayOutput) Index(i pulumi.IntInput) RepositoryEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoryEnvironment {
		return vs[0].([]RepositoryEnvironment)[vs[1].(int)]
	}).(RepositoryEnvironmentOutput)
}

type RepositoryEnvironmentMapOutput struct{ *pulumi.OutputState }

func (RepositoryEnvironmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]RepositoryEnvironment)(nil))
}

func (o RepositoryEnvironmentMapOutput) ToRepositoryEnvironmentMapOutput() RepositoryEnvironmentMapOutput {
	return o
}

func (o RepositoryEnvironmentMapOutput) ToRepositoryEnvironmentMapOutputWithContext(ctx context.Context) RepositoryEnvironmentMapOutput {
	return o
}

func (o RepositoryEnvironmentMapOutput) MapIndex(k pulumi.StringInput) RepositoryEnvironmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) RepositoryEnvironment {
		return vs[0].(map[string]RepositoryEnvironment)[vs[1].(string)]
	}).(RepositoryEnvironmentOutput)
}

func init() {
	pulumi.RegisterOutputType(RepositoryEnvironmentOutput{})
	pulumi.RegisterOutputType(RepositoryEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(RepositoryEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(RepositoryEnvironmentMapOutput{})
}
