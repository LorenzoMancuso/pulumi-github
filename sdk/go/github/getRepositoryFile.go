// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source allows you to read files within a
// GitHub repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-github/sdk/v4/go/github"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "main"
// 		_, err := github.LookupRepositoryFile(ctx, &github.LookupRepositoryFileArgs{
// 			Repository: github_repository.Foo.Name,
// 			Branch:     &opt0,
// 			File:       ".gitignore",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupRepositoryFile(ctx *pulumi.Context, args *LookupRepositoryFileArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryFileResult, error) {
	var rv LookupRepositoryFileResult
	err := ctx.Invoke("github:index/getRepositoryFile:getRepositoryFile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryFile.
type LookupRepositoryFileArgs struct {
	// Git branch (defaults to `main`).
	// The branch must already exist, it will not be created if it does not already exist.
	Branch *string `pulumi:"branch"`
	// The path of the file to manage.
	File string `pulumi:"file"`
	// The repository to create the file in.
	Repository string `pulumi:"repository"`
}

// A collection of values returned by getRepositoryFile.
type LookupRepositoryFileResult struct {
	Branch *string `pulumi:"branch"`
	// Committer author name.
	CommitAuthor string `pulumi:"commitAuthor"`
	// Committer email address.
	CommitEmail string `pulumi:"commitEmail"`
	// Commit message when file was last updated.
	CommitMessage string `pulumi:"commitMessage"`
	// The SHA of the commit that modified the file.
	CommitSha string `pulumi:"commitSha"`
	// The file content.
	Content string `pulumi:"content"`
	File    string `pulumi:"file"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	Repository string `pulumi:"repository"`
	// The SHA blob of the file.
	Sha string `pulumi:"sha"`
}
