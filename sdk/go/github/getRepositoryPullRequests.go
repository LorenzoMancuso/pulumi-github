// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about multiple GitHub Pull Requests in a repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-github/sdk/v4/go/github"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "main"
// 		opt1 := "updated"
// 		opt2 := "desc"
// 		opt3 := "open"
// 		_, err := github.GetRepositoryPullRequests(ctx, &github.GetRepositoryPullRequestsArgs{
// 			BaseRef:        &opt0,
// 			BaseRepository: "example-repository",
// 			SortBy:         &opt1,
// 			SortDirection:  &opt2,
// 			State:          &opt3,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetRepositoryPullRequests(ctx *pulumi.Context, args *GetRepositoryPullRequestsArgs, opts ...pulumi.InvokeOption) (*GetRepositoryPullRequestsResult, error) {
	var rv GetRepositoryPullRequestsResult
	err := ctx.Invoke("github:index/getRepositoryPullRequests:getRepositoryPullRequests", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepositoryPullRequests.
type GetRepositoryPullRequestsArgs struct {
	// If set, filters Pull Requests by base branch name.
	BaseRef *string `pulumi:"baseRef"`
	// Name of the base repository to retrieve the Pull Requests from.
	BaseRepository string `pulumi:"baseRepository"`
	// If set, filters Pull Requests by head user or head organization and branch name in the format of "user:ref-name" or "organization:ref-name". For example: "github:new-script-format" or "octocat:test-branch".
	HeadRef *string `pulumi:"headRef"`
	// Owner of the repository. If not provided, the provider's default owner is used.
	Owner *string `pulumi:"owner"`
	// If set, indicates what to sort results by. Can be either "created", "updated", "popularity" (comment count) or "long-running" (age, filtering by pulls updated in the last month). Default: "created".
	SortBy *string `pulumi:"sortBy"`
	// If set, controls the direction of the sort. Can be either "asc" or "desc". Default: "asc".
	SortDirection *string `pulumi:"sortDirection"`
	// If set, filters Pull Requests by state. Can be "open", "closed", or "all". Default: "open".
	State *string `pulumi:"state"`
}

// A collection of values returned by getRepositoryPullRequests.
type GetRepositoryPullRequestsResult struct {
	// Name of the ref (branch) of the Pull Request base.
	BaseRef        *string `pulumi:"baseRef"`
	BaseRepository string  `pulumi:"baseRepository"`
	// Value of the Pull Request `HEAD` reference.
	HeadRef *string `pulumi:"headRef"`
	// The provider-assigned unique ID for this managed resource.
	Id    string  `pulumi:"id"`
	Owner *string `pulumi:"owner"`
	// Collection of Pull Requests matching the filters. Each of the results conforms to the following scheme:
	Results       []GetRepositoryPullRequestsResultType `pulumi:"results"`
	SortBy        *string                               `pulumi:"sortBy"`
	SortDirection *string                               `pulumi:"sortDirection"`
	// the current Pull Request state - can be "open", "closed" or "merged".
	State *string `pulumi:"state"`
}
