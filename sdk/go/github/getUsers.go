// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve information about multiple GitHub users at once.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-github/sdk/v4/go/github"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := github.GetUsers(ctx, &github.GetUsersArgs{
// 			Usernames: []string{
// 				"example1",
// 				"example2",
// 				"example3",
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("validUsers", data.Github_user.Example.Logins)
// 		ctx.Export("invalidUsers", data.Github_user.Example.Unknown_logins)
// 		return nil
// 	})
// }
// ```
func GetUsers(ctx *pulumi.Context, args *GetUsersArgs, opts ...pulumi.InvokeOption) (*GetUsersResult, error) {
	var rv GetUsersResult
	err := ctx.Invoke("github:index/getUsers:getUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsers.
type GetUsersArgs struct {
	// List of usernames.
	Usernames []string `pulumi:"usernames"`
}

// A collection of values returned by getUsers.
type GetUsersResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// list of logins of users that could be found.
	Logins []string `pulumi:"logins"`
	// list of Node IDs of users that could be found.
	NodeIds []string `pulumi:"nodeIds"`
	// list of logins without matching user.
	UnknownLogins []string `pulumi:"unknownLogins"`
	Usernames     []string `pulumi:"usernames"`
}
