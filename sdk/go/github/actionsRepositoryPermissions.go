// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ActionsRepositoryPermissions struct {
	pulumi.CustomResourceState

	AllowedActions       pulumi.StringPtrOutput                                    `pulumi:"allowedActions"`
	AllowedActionsConfig ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput `pulumi:"allowedActionsConfig"`
	Enabled              pulumi.BoolPtrOutput                                      `pulumi:"enabled"`
	Repository           pulumi.StringOutput                                       `pulumi:"repository"`
}

// NewActionsRepositoryPermissions registers a new resource with the given unique name, arguments, and options.
func NewActionsRepositoryPermissions(ctx *pulumi.Context,
	name string, args *ActionsRepositoryPermissionsArgs, opts ...pulumi.ResourceOption) (*ActionsRepositoryPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	var resource ActionsRepositoryPermissions
	err := ctx.RegisterResource("github:index/actionsRepositoryPermissions:ActionsRepositoryPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActionsRepositoryPermissions gets an existing ActionsRepositoryPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActionsRepositoryPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActionsRepositoryPermissionsState, opts ...pulumi.ResourceOption) (*ActionsRepositoryPermissions, error) {
	var resource ActionsRepositoryPermissions
	err := ctx.ReadResource("github:index/actionsRepositoryPermissions:ActionsRepositoryPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActionsRepositoryPermissions resources.
type actionsRepositoryPermissionsState struct {
	AllowedActions       *string                                           `pulumi:"allowedActions"`
	AllowedActionsConfig *ActionsRepositoryPermissionsAllowedActionsConfig `pulumi:"allowedActionsConfig"`
	Enabled              *bool                                             `pulumi:"enabled"`
	Repository           *string                                           `pulumi:"repository"`
}

type ActionsRepositoryPermissionsState struct {
	AllowedActions       pulumi.StringPtrInput
	AllowedActionsConfig ActionsRepositoryPermissionsAllowedActionsConfigPtrInput
	Enabled              pulumi.BoolPtrInput
	Repository           pulumi.StringPtrInput
}

func (ActionsRepositoryPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*actionsRepositoryPermissionsState)(nil)).Elem()
}

type actionsRepositoryPermissionsArgs struct {
	AllowedActions       *string                                           `pulumi:"allowedActions"`
	AllowedActionsConfig *ActionsRepositoryPermissionsAllowedActionsConfig `pulumi:"allowedActionsConfig"`
	Enabled              *bool                                             `pulumi:"enabled"`
	Repository           string                                            `pulumi:"repository"`
}

// The set of arguments for constructing a ActionsRepositoryPermissions resource.
type ActionsRepositoryPermissionsArgs struct {
	AllowedActions       pulumi.StringPtrInput
	AllowedActionsConfig ActionsRepositoryPermissionsAllowedActionsConfigPtrInput
	Enabled              pulumi.BoolPtrInput
	Repository           pulumi.StringInput
}

func (ActionsRepositoryPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*actionsRepositoryPermissionsArgs)(nil)).Elem()
}

type ActionsRepositoryPermissionsInput interface {
	pulumi.Input

	ToActionsRepositoryPermissionsOutput() ActionsRepositoryPermissionsOutput
	ToActionsRepositoryPermissionsOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsOutput
}

func (*ActionsRepositoryPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsRepositoryPermissions)(nil)).Elem()
}

func (i *ActionsRepositoryPermissions) ToActionsRepositoryPermissionsOutput() ActionsRepositoryPermissionsOutput {
	return i.ToActionsRepositoryPermissionsOutputWithContext(context.Background())
}

func (i *ActionsRepositoryPermissions) ToActionsRepositoryPermissionsOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRepositoryPermissionsOutput)
}

// ActionsRepositoryPermissionsArrayInput is an input type that accepts ActionsRepositoryPermissionsArray and ActionsRepositoryPermissionsArrayOutput values.
// You can construct a concrete instance of `ActionsRepositoryPermissionsArrayInput` via:
//
//          ActionsRepositoryPermissionsArray{ ActionsRepositoryPermissionsArgs{...} }
type ActionsRepositoryPermissionsArrayInput interface {
	pulumi.Input

	ToActionsRepositoryPermissionsArrayOutput() ActionsRepositoryPermissionsArrayOutput
	ToActionsRepositoryPermissionsArrayOutputWithContext(context.Context) ActionsRepositoryPermissionsArrayOutput
}

type ActionsRepositoryPermissionsArray []ActionsRepositoryPermissionsInput

func (ActionsRepositoryPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionsRepositoryPermissions)(nil)).Elem()
}

func (i ActionsRepositoryPermissionsArray) ToActionsRepositoryPermissionsArrayOutput() ActionsRepositoryPermissionsArrayOutput {
	return i.ToActionsRepositoryPermissionsArrayOutputWithContext(context.Background())
}

func (i ActionsRepositoryPermissionsArray) ToActionsRepositoryPermissionsArrayOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRepositoryPermissionsArrayOutput)
}

// ActionsRepositoryPermissionsMapInput is an input type that accepts ActionsRepositoryPermissionsMap and ActionsRepositoryPermissionsMapOutput values.
// You can construct a concrete instance of `ActionsRepositoryPermissionsMapInput` via:
//
//          ActionsRepositoryPermissionsMap{ "key": ActionsRepositoryPermissionsArgs{...} }
type ActionsRepositoryPermissionsMapInput interface {
	pulumi.Input

	ToActionsRepositoryPermissionsMapOutput() ActionsRepositoryPermissionsMapOutput
	ToActionsRepositoryPermissionsMapOutputWithContext(context.Context) ActionsRepositoryPermissionsMapOutput
}

type ActionsRepositoryPermissionsMap map[string]ActionsRepositoryPermissionsInput

func (ActionsRepositoryPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionsRepositoryPermissions)(nil)).Elem()
}

func (i ActionsRepositoryPermissionsMap) ToActionsRepositoryPermissionsMapOutput() ActionsRepositoryPermissionsMapOutput {
	return i.ToActionsRepositoryPermissionsMapOutputWithContext(context.Background())
}

func (i ActionsRepositoryPermissionsMap) ToActionsRepositoryPermissionsMapOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsRepositoryPermissionsMapOutput)
}

type ActionsRepositoryPermissionsOutput struct{ *pulumi.OutputState }

func (ActionsRepositoryPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsRepositoryPermissions)(nil)).Elem()
}

func (o ActionsRepositoryPermissionsOutput) ToActionsRepositoryPermissionsOutput() ActionsRepositoryPermissionsOutput {
	return o
}

func (o ActionsRepositoryPermissionsOutput) ToActionsRepositoryPermissionsOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsOutput {
	return o
}

func (o ActionsRepositoryPermissionsOutput) AllowedActions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActionsRepositoryPermissions) pulumi.StringPtrOutput { return v.AllowedActions }).(pulumi.StringPtrOutput)
}

func (o ActionsRepositoryPermissionsOutput) AllowedActionsConfig() ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput {
	return o.ApplyT(func(v *ActionsRepositoryPermissions) ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput {
		return v.AllowedActionsConfig
	}).(ActionsRepositoryPermissionsAllowedActionsConfigPtrOutput)
}

func (o ActionsRepositoryPermissionsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActionsRepositoryPermissions) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ActionsRepositoryPermissionsOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *ActionsRepositoryPermissions) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

type ActionsRepositoryPermissionsArrayOutput struct{ *pulumi.OutputState }

func (ActionsRepositoryPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActionsRepositoryPermissions)(nil)).Elem()
}

func (o ActionsRepositoryPermissionsArrayOutput) ToActionsRepositoryPermissionsArrayOutput() ActionsRepositoryPermissionsArrayOutput {
	return o
}

func (o ActionsRepositoryPermissionsArrayOutput) ToActionsRepositoryPermissionsArrayOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsArrayOutput {
	return o
}

func (o ActionsRepositoryPermissionsArrayOutput) Index(i pulumi.IntInput) ActionsRepositoryPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActionsRepositoryPermissions {
		return vs[0].([]*ActionsRepositoryPermissions)[vs[1].(int)]
	}).(ActionsRepositoryPermissionsOutput)
}

type ActionsRepositoryPermissionsMapOutput struct{ *pulumi.OutputState }

func (ActionsRepositoryPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActionsRepositoryPermissions)(nil)).Elem()
}

func (o ActionsRepositoryPermissionsMapOutput) ToActionsRepositoryPermissionsMapOutput() ActionsRepositoryPermissionsMapOutput {
	return o
}

func (o ActionsRepositoryPermissionsMapOutput) ToActionsRepositoryPermissionsMapOutputWithContext(ctx context.Context) ActionsRepositoryPermissionsMapOutput {
	return o
}

func (o ActionsRepositoryPermissionsMapOutput) MapIndex(k pulumi.StringInput) ActionsRepositoryPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActionsRepositoryPermissions {
		return vs[0].(map[string]*ActionsRepositoryPermissions)[vs[1].(string)]
	}).(ActionsRepositoryPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsRepositoryPermissionsInput)(nil)).Elem(), &ActionsRepositoryPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsRepositoryPermissionsArrayInput)(nil)).Elem(), ActionsRepositoryPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionsRepositoryPermissionsMapInput)(nil)).Elem(), ActionsRepositoryPermissionsMap{})
	pulumi.RegisterOutputType(ActionsRepositoryPermissionsOutput{})
	pulumi.RegisterOutputType(ActionsRepositoryPermissionsArrayOutput{})
	pulumi.RegisterOutputType(ActionsRepositoryPermissionsMapOutput{})
}
