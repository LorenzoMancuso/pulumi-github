// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Release extends pulumi.CustomResource {
    /**
     * Get an existing Release resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReleaseState, opts?: pulumi.CustomResourceOptions): Release {
        return new Release(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'github:index/release:Release';

    /**
     * Returns true if the given object is an instance of Release.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Release {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Release.__pulumiType;
    }

    public readonly body!: pulumi.Output<string | undefined>;
    public readonly discussionCategoryName!: pulumi.Output<string | undefined>;
    public readonly draft!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    public readonly generateReleaseNotes!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly prerelease!: pulumi.Output<boolean | undefined>;
    public readonly repository!: pulumi.Output<string>;
    public readonly tagName!: pulumi.Output<string>;
    public readonly targetCommitish!: pulumi.Output<string | undefined>;

    /**
     * Create a Release resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReleaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReleaseArgs | ReleaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReleaseState | undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["discussionCategoryName"] = state ? state.discussionCategoryName : undefined;
            resourceInputs["draft"] = state ? state.draft : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["generateReleaseNotes"] = state ? state.generateReleaseNotes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["prerelease"] = state ? state.prerelease : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["tagName"] = state ? state.tagName : undefined;
            resourceInputs["targetCommitish"] = state ? state.targetCommitish : undefined;
        } else {
            const args = argsOrState as ReleaseArgs | undefined;
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.tagName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tagName'");
            }
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["discussionCategoryName"] = args ? args.discussionCategoryName : undefined;
            resourceInputs["draft"] = args ? args.draft : undefined;
            resourceInputs["generateReleaseNotes"] = args ? args.generateReleaseNotes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prerelease"] = args ? args.prerelease : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["tagName"] = args ? args.tagName : undefined;
            resourceInputs["targetCommitish"] = args ? args.targetCommitish : undefined;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Release.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Release resources.
 */
export interface ReleaseState {
    body?: pulumi.Input<string>;
    discussionCategoryName?: pulumi.Input<string>;
    draft?: pulumi.Input<boolean>;
    etag?: pulumi.Input<string>;
    generateReleaseNotes?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    prerelease?: pulumi.Input<boolean>;
    repository?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    targetCommitish?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Release resource.
 */
export interface ReleaseArgs {
    body?: pulumi.Input<string>;
    discussionCategoryName?: pulumi.Input<string>;
    draft?: pulumi.Input<boolean>;
    generateReleaseNotes?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    prerelease?: pulumi.Input<boolean>;
    repository: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    targetCommitish?: pulumi.Input<string>;
}
